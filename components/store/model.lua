local M = {}--local IAP             = require("components.store.IAP")--local YourHost  = "http://localhost:4000/tutorials/Kwik4"M.URL           = YourHost.."/BookShelf/"M.backgroundImg = "bg.png"M.bookShelfType  = 2 --{pages = 0, embedded = 1, tmplt=2}------------------------------------ M.URL = nil means simple IAP store without network download like Kwik3 IAP-- downloadBtn, savingTxt won'T be used. You don't need to create them.--M.epsodes = {            book01  ={name = "book01", dir = "book01", numOfPages = 6, info = "book01 information test"},            book02  ={name = "book02", dir = "book02", numOfPages = 3, info = "book02 information test"},    }--M.catalogue = {    products = {            book01 = {            productNames = { apple="book01_apple", google="book01_googgle", amazon="book01_amazon"},            productType  = "non-consumable",            onPurchase   = function() IAP.setInventoryValue("unlock_book01") end,            onRefund     = function() IAP.removeFromInventory("unlock_book01") end,        },            book02 = {            productNames = { apple="book02_apple", google="book02_googgle", amazon="book02_amazon"},            productType  = "non-consumable",            onPurchase   = function() IAP.setInventoryValue("unlock_book02") end,            onRefund     = function() IAP.removeFromInventory("unlock_book02") end,        },    },    inventoryItems = {            unlock_book01 = { productType="non-consumable" },            unlock_book02 = { productType="non-consumable" },    }}--M.purchaseAlertMessage = "Your purchase was successful"M.restoreAlertMessage  = "Your items are being restored"M.downloadErrorMessage = "Check network alive to download the content"--M.gotoSceneEffect   = "slideRight"M.showOverlayEffect = "slideBottom"--M.getPageNum = function(epsode)    local pNum = M.epsodes[epsode].dir    pNum = pNum:sub(16)    return pNumend----local _K = require("Application")----M.getPageName = function (epsode)    local pNum = M.epsodes[epsode].dir    pNum = pNum:sub(16)    return "views.page0"..pNum.."Scene"end----M.getPageInfo = function (epsode)print("---------", epsode)print(M.epsodes[epsode].info)    local pNum = M.epsodes[epsode].info    print(pNum)    if string.len(pNum) > 1 then        pNum = pNum:sub(2)        return "views.page0"..pNum.."Scene"    else        return false    endend----M.isIAP = function(pageNum)    for k, v in pairs(M.epsodes) do        local pNum = v.dir        pNum = tonumber(pNum:sub(16))        if pageNum >= pNum and pageNum <= pNum + v.numOfPages -1 then            return v.name        end    end    return falseendreturn M