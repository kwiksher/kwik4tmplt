local M = {}--local IAP             = require("components.store.IAP")---- local YourHost  = "http://localhost:4000/tutorials/Kwik4"M.URL           = "{{serverURL}}" -- YourHost.."/BookShelf/"M.backgroundImg = "bg.png"{{#bookShelfType}}M.bookShelfType  = {{bookShelfType}} --{pages = 0, embedded = 1, tmplt=2}{{/bookShelfType}}--M.INFO_PAGE = {{infoPage}} -- "views.page02Scene" -- for bookshelf embedded and tmpltM.debug     = {{iapDebug}}------------------------------------ M.URL = nil means simple IAP store without network download like Kwik3 IAP-- downloadBtn, savingTxt won'T be used. You don't need to create them.--{{#BookPages}}M.epsodes = {    {{#list}}        {{product}}  ={name = "{{product}}", dir = "assets/images/p{{startPage}}", numOfPages = {{numOfPages}}, info = "p{{info}}"},    {{/list}}}{{/BookPages}}{{^BookPages}}M.epsodes = {    {{#list}}        {{product}}  ={name = "{{product}}", dir = "{{product}}", numOfPages = {{numOfPages}}, info = "{{desc}}", versions ={ {{versions}} }},    {{/list}}}{{/BookPages}}--M.catalogue = {    products = {    {{#list}}        {{product}} = {            productNames = { apple="{{product_apple}}", google="{{product_googgle}}", amazon="{{product_amazon}}"},            productType  = "non-consumable",            onPurchase   = function() IAP.setInventoryValue("unlock_{{product}}") end,            onRefund     = function() IAP.removeFromInventory("unlock_{{product}}") end,        },    {{/list}}    },    inventoryItems = {    {{#list}}        unlock_{{product}} = { productType="non-consumable" },    {{/list}}    }}--M.purchaseAlertMessage = "Your purchase was successful"M.restoreAlertMessage  = "Your items are being restored"M.downloadErrorMessage = "Check network alive to download the content"--M.gotoSceneEffect   = "slideRight"M.showOverlayEffect = "slideBottom"--M.getPageNum = function(epsode)    local pNum = M.epsodes[epsode].dir    pNum = pNum:sub(16)    return pNumend----local _K = require("Application")----M.getPageName = function (epsode)    local pNum = M.epsodes[epsode].dir    pNum = pNum:sub(16)    return "views.page0"..pNum.."Scene"end----M.getPageInfo = function (epsode)    local pNum = M.epsodes[epsode].info    if string.len(pNum) > 1 and  string.len(pNum) < 3 then        pNum = pNum:sub(2)        return "views.page0"..pNum.."Scene"    else        if string.len(pNum) then            native.showAlert("Info", pNum, {"OK"})        end        return false    endend--{{#BookPages}}--M.isIAP = function(pageNum)    for k, v in pairs(M.epsodes) do        local pNum = v.dir        pNum = tonumber(pNum:sub(16))        if pageNum >= pNum and pageNum <= pNum + v.numOfPages -1 then            return v.name        end    end    return falseend--local composer = require("composer")local _gotoScene = composer.gotoScene--composer.gotoScene = function( sceneName, options)    local pageNum = string.sub(sceneName, 11, 12)    if M.isIAP(tonumber(pageNum)) then        _K.systemDir = system.ApplicationSupportDirectory    else        _K.systemDir   = system.ResourceDirectory    end    _gotoScene(sceneName, options)end{{/BookPages}}--return M