-- ex: set ro:
-- DO NOT EDIT.
-- generated by smc (http://smc.sourceforge.net/)
-- from file : store.sm

local error = error
local pcall = pcall
local strformat = require 'string'.format

local statemap = require 'extlib.statemap'

local _ENV = nil

local StoreManagerState = statemap.State.class()

local function _empty ()
end
StoreManagerState.Entry = _empty
StoreManagerState.Exit = _empty

local function _default (self, fsm)
    self:Default(fsm)
end
StoreManagerState.backThumbnail = _default
StoreManagerState.clickCloseDialog = _default
StoreManagerState.clickImage = _default
StoreManagerState.clickPurchase = _default
StoreManagerState.createDialog = _default
StoreManagerState.exit = _default
StoreManagerState.fromDialog = _default
StoreManagerState.gotoBook = _default
StoreManagerState.onClose = _default
StoreManagerState.onDownloadQueue = _default
StoreManagerState.onFailure = _default
StoreManagerState.onPurchase = _default
StoreManagerState.onPurchaseCancel = _default
StoreManagerState.onSuccess = _default
StoreManagerState.showDialogNotPurchased = _default
StoreManagerState.showDialogPurchased = _default
StoreManagerState.showThumbnail = _default

function StoreManagerState:Default (fsm)
    local msg = strformat("Undefined Transition\nState: %s\nTransition: %s\n",
                          fsm:getState().name,
                          fsm.transition)
    error(msg)
end

local MainMap = {}
local DialogMap = {}
local NetworkMap = {}

MainMap.Default = StoreManagerState:new('MainMap.Default', -1)

MainMap.INIT = MainMap.Default:new('MainMap.INIT', 0)

function MainMap.INIT:Entry (fsm)
    local ctxt = fsm.owner
    ctxt:initModel()
end

function MainMap.INIT:onDownloadQueue (fsm)
    fsm:pushState(NetworkMap.Downloading)
    fsm:getState():Entry(fsm)
end

function MainMap.INIT:showThumbnail (fsm)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:createThumbnail()
        end
    )
    fsm:setState(MainMap.ThumbnailDisplayed)
    fsm:getState():Entry(fsm)
end

MainMap.ThumbnailDisplayed = MainMap.Default:new('MainMap.ThumbnailDisplayed', 1)

function MainMap.ThumbnailDisplayed:Entry (fsm)
    local ctxt = fsm.owner
    ctxt:removeEventListener()
end

function MainMap.ThumbnailDisplayed:clickImage (fsm, id)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:isBookPurchased(id)
        end
    )
    fsm:setState(MainMap.DisplayingDialog)
    fsm:getState():Entry(fsm)
end

function MainMap.ThumbnailDisplayed:clickPurchase (fsm, id, fromDialog)
    local ctxt = fsm.owner
    local endState = fsm:getState()
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:purchase(id, fromDialog)
        end
    )
    fsm:setState(endState)
    fsm:pushState(DialogMap.IAPBadger)
    fsm:getState():Entry(fsm)
end

function MainMap.ThumbnailDisplayed:gotoBook (fsm, id)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:gotoScene(id)
        end
    )
    fsm:setState(MainMap.BookDisplayed)
    fsm:getState():Entry(fsm)
end

MainMap.DisplayingDialog = MainMap.Default:new('MainMap.DisplayingDialog', 2)

function MainMap.DisplayingDialog:createDialog (fsm, id, isPurchase)
    local ctxt = fsm.owner
    local endState = fsm:getState()
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:onCreateDialog(id, isPurchase)
        end
    )
    fsm:setState(endState)
    fsm:pushState(DialogMap.INIT)
    fsm:getState():Entry(fsm)
end

function MainMap.DisplayingDialog:exit (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(MainMap.BookDisplayed)
    fsm:getState():Entry(fsm)
end

function MainMap.DisplayingDialog:onClose (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(MainMap.ThumbnailDisplayed)
    fsm:getState():Entry(fsm)
end

MainMap.BookDisplayed = MainMap.Default:new('MainMap.BookDisplayed', 3)

function MainMap.BookDisplayed:Entry (fsm)
    local ctxt = fsm.owner
    ctxt:onEntryBookDisplayed()
end

function MainMap.BookDisplayed:Exit (fsm)
    local ctxt = fsm.owner
    ctxt:onExitBookDisplayed()
end

function MainMap.BookDisplayed:exit (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(MainMap.INIT)
    fsm:getState():Entry(fsm)
end

DialogMap.Default = StoreManagerState:new('DialogMap.Default', -1)

DialogMap.INIT = DialogMap.Default:new('DialogMap.INIT', 4)

function DialogMap.INIT:showDialogNotPurchased (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(DialogMap.BookNotPurchased)
    fsm:getState():Entry(fsm)
end

function DialogMap.INIT:showDialogPurchased (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(DialogMap.BookPurchased)
    fsm:getState():Entry(fsm)
end

DialogMap.BookPurchased = DialogMap.Default:new('DialogMap.BookPurchased', 5)

function DialogMap.BookPurchased:Exit (fsm)
    local ctxt = fsm.owner
    ctxt:destroyDialog()
end

function DialogMap.BookPurchased:clickCloseDialog (fsm)
    fsm:getState():Exit(fsm)
    fsm:popState()
    fsm:onClose()
end

function DialogMap.BookPurchased:clickImage (fsm, id)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:destroyThumbnail()
            ctxt:gotoScene(id)
        end
    )
    fsm:popState()
    fsm:exit()
end

DialogMap.BookNotPurchased = DialogMap.Default:new('DialogMap.BookNotPurchased', 6)

function DialogMap.BookNotPurchased:clickCloseDialog (fsm)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:destroyDialog()
        end
    )
    fsm:popState()
    fsm:onClose()
end

function DialogMap.BookNotPurchased:clickPurchase (fsm, id, fromDialog)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:purchase(id, fromDialog)
        end
    )
    fsm:setState(DialogMap.IAPBadger)
    fsm:getState():Entry(fsm)
end

DialogMap.IAPBadger = DialogMap.Default:new('DialogMap.IAPBadger', 7)

function DialogMap.IAPBadger:backThumbnail (fsm)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:refreshThumbnail()
        end
    )
    fsm:popState()
end

function DialogMap.IAPBadger:onPurchase (fsm)
    fsm:pushState(NetworkMap.Downloading)
    fsm:getState():Entry(fsm)
end

function DialogMap.IAPBadger:onPurchaseCancel (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(DialogMap.BookNotPurchased)
    fsm:getState():Entry(fsm)
end

function DialogMap.IAPBadger:showDialogNotPurchased (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(DialogMap.BookNotPurchased)
    fsm:getState():Entry(fsm)
end

function DialogMap.IAPBadger:showDialogPurchased (fsm)
    fsm:getState():Exit(fsm)
    fsm:setState(DialogMap.BookPurchased)
    fsm:getState():Entry(fsm)
end

NetworkMap.Default = StoreManagerState:new('NetworkMap.Default', -1)

NetworkMap.Downloading = NetworkMap.Default:new('NetworkMap.Downloading', 8)

function NetworkMap.Downloading:Entry (fsm)
    local ctxt = fsm.owner
    ctxt:startDownload(id)
end

function NetworkMap.Downloading:onFailure (fsm)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:queue(id)
        end
    )
    fsm:setState(NetworkMap.DownloadedError)
    fsm:getState():Entry(fsm)
end

function NetworkMap.Downloading:onSuccess (fsm)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:unzip()
        end
    )
    fsm:setState(NetworkMap.Downloaded)
    fsm:getState():Entry(fsm)
end

NetworkMap.Downloaded = NetworkMap.Default:new('NetworkMap.Downloaded', 9)

function NetworkMap.Downloaded:backThumbnail (fsm)
    fsm:getState():Exit(fsm)
    fsm:popState()
    fsm:backThumbnail()
end

function NetworkMap.Downloaded:fromDialog (fsm, id)
    local ctxt = fsm.owner
    fsm:getState():Exit(fsm)
    fsm:clearState()
    local r, msg = pcall(
        function ()
            ctxt:updateDialog(id)
        end
    )
    fsm:popState()
    fsm:showDialogPurchased()
end

NetworkMap.DownloadedError = NetworkMap.Default:new('NetworkMap.DownloadedError', 10)

function NetworkMap.DownloadedError:backThumbnail (fsm)
    fsm:getState():Exit(fsm)
    fsm:popState()
    fsm:backThumbnail()
end

function NetworkMap.DownloadedError:fromDialog (fsm, id)
    fsm:getState():Exit(fsm)
    fsm:popState()
    fsm:showDialogNotPurchased()
end

local StoreManagerFSM = statemap.FSMContext.class()

function StoreManagerFSM:_init ()
    self:setState(MainMap.INIT)
end

function StoreManagerFSM:backThumbnail ()
    self.transition = 'backThumbnail'
    self:getState():backThumbnail(self)
    self.transition = nil
end

function StoreManagerFSM:clickCloseDialog ()
    self.transition = 'clickCloseDialog'
    self:getState():clickCloseDialog(self)
    self.transition = nil
end

function StoreManagerFSM:clickImage (...)
    self.transition = 'clickImage'
    self:getState():clickImage(self, ...)
    self.transition = nil
end

function StoreManagerFSM:clickPurchase (...)
    self.transition = 'clickPurchase'
    self:getState():clickPurchase(self, ...)
    self.transition = nil
end

function StoreManagerFSM:createDialog (...)
    self.transition = 'createDialog'
    self:getState():createDialog(self, ...)
    self.transition = nil
end

function StoreManagerFSM:exit ()
    self.transition = 'exit'
    self:getState():exit(self)
    self.transition = nil
end

function StoreManagerFSM:fromDialog (...)
    self.transition = 'fromDialog'
    self:getState():fromDialog(self, ...)
    self.transition = nil
end

function StoreManagerFSM:gotoBook (...)
    self.transition = 'gotoBook'
    self:getState():gotoBook(self, ...)
    self.transition = nil
end

function StoreManagerFSM:onClose ()
    self.transition = 'onClose'
    self:getState():onClose(self)
    self.transition = nil
end

function StoreManagerFSM:onDownloadQueue ()
    self.transition = 'onDownloadQueue'
    self:getState():onDownloadQueue(self)
    self.transition = nil
end

function StoreManagerFSM:onFailure ()
    self.transition = 'onFailure'
    self:getState():onFailure(self)
    self.transition = nil
end

function StoreManagerFSM:onPurchase ()
    self.transition = 'onPurchase'
    self:getState():onPurchase(self)
    self.transition = nil
end

function StoreManagerFSM:onPurchaseCancel ()
    self.transition = 'onPurchaseCancel'
    self:getState():onPurchaseCancel(self)
    self.transition = nil
end

function StoreManagerFSM:onSuccess ()
    self.transition = 'onSuccess'
    self:getState():onSuccess(self)
    self.transition = nil
end

function StoreManagerFSM:showDialogNotPurchased ()
    self.transition = 'showDialogNotPurchased'
    self:getState():showDialogNotPurchased(self)
    self.transition = nil
end

function StoreManagerFSM:showDialogPurchased ()
    self.transition = 'showDialogPurchased'
    self:getState():showDialogPurchased(self)
    self.transition = nil
end

function StoreManagerFSM:showThumbnail ()
    self.transition = 'showThumbnail'
    self:getState():showThumbnail(self)
    self.transition = nil
end

function StoreManagerFSM:enterStartState ()
    self:getState():Entry(self)
end

return
StoreManagerFSM
-- Local variables:
--  buffer-read-only: t
-- End:
